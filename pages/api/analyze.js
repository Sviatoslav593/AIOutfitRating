import { IncomingForm } from "formidable";
import fs from "fs";

// Disable default body parser to handle file uploads
export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const form = new IncomingForm();
    const [fields, files] = await form.parse(req);

    const file = files.image?.[0];
    if (!file) {
      return res.status(400).json({ error: "No image file provided" });
    }

    if (!file.mimetype?.startsWith("image/")) {
      return res.status(400).json({ error: "File must be an image" });
    }

    const imageBuffer = fs.readFileSync(file.filepath);
    const base64Image = imageBuffer.toString("base64");

    let analysis;
    try {
      analysis = await analyzeOutfitWithOpenAI(base64Image, file.mimetype);
    } catch (apiError) {
      console.error("OpenAI API Error:", apiError.message);

      // Fallback to demo analysis if OpenAI quota exceeded
      analysis = generateDemoAnalysis();
    }

    fs.unlinkSync(file.filepath);

    return res.status(200).json(analysis);
  } catch (error) {
    console.error("Analysis error:", error);
    return res.status(500).json({
      error: "Failed to analyze outfit. Please try again.",
      details: error.message,
    });
  }
}

/**
 * Analyze outfit using OpenAI Vision API
 */
async function analyzeOutfitWithOpenAI(base64Image, mimeType) {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error("OpenAI API key not configured");
  }

  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-4o-mini",
      response_format: { type: "json_object" },
      temperature: 0.7,
      max_tokens: 300,
      messages: [
        {
          role: "system",
          content:
            "–¢–∏ ‚Äî —Å—Ç–∏–ª—ñ—Å—Ç. –ê–Ω–∞–ª—ñ–∑—É–π –ª–∏—à–µ —Ç–µ, —â–æ –±–∞—á–∏—à –Ω–∞ —Ñ–æ—Ç–æ. –£–Ω–∏–∫–∞–π –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø—É '–ß—É–¥–æ–≤–∏–π –æ–±—Ä–∞–∑'. –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –¥–µ—Ç–∞–ª—ñ: –∫–æ–ª—å–æ—Ä–∏, —Ñ–∞–∫—Ç—É—Ä–∏, —Ñ–∞—Å–æ–Ω–∏, –ø–æ—Å–∞–¥–∫–∞, –ø–æ—î–¥–Ω–∞–Ω–Ω—è, –≤–∑—É—Ç—Ç—è, –∞–∫—Å–µ—Å—É–∞—Ä–∏. –Ø–∫—â–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–µ–º–∞—î –ª—é–¥—Å—å–∫–æ–≥–æ –∞—É—Ç—Ñ—ñ—Ç—É (–ª–æ–≥–æ—Ç–∏–ø/—ñ–∫–æ–Ω–∫–∞/—Å–∫—Ä—ñ–Ω—à–æ—Ç/–∫—ñ–º–Ω–∞—Ç–∞/–ø–µ–π–∑–∞–∂/—Ç–æ–≤–∞—Ä –±–µ–∑ –ª—é–¥–∏–Ω–∏) ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ JSON –∑—ñ style='not-an-outfit', rating=0 —ñ –ø–æ—è—Å–Ω—é–≤–∞–ª—å–Ω–∏–º description.",
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ñ–æ—Ç–æ –∞—É—Ç—Ñ—ñ—Ç—É –π –ø–æ–≤–µ—Ä–Ω–∏ –°–¢–†–û–ì–ò–ô JSON: {"rating": —á–∏—Å–ª–æ 1-10, "style": –∫–æ—Ä–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, "description": 1‚Äì2 –Ω–∞—Å–∏—á–µ–Ω—ñ, —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ—é. –ë–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∑–∞ JSON.}',
            },
            {
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${base64Image}`,
                detail: "high",
              },
            },
          ],
        },
      ],
    }),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(
      `OpenAI API error: ${errorData.error?.message || response.statusText}`
    );
  }

  const data = await response.json();

  let content = data.choices?.[0]?.message?.content?.trim();
  if (!content) {
    throw new Error("No response from OpenAI");
  }

  // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–≥–æ—Ä–Ω—É—Ç–∞ —É ```json ... ```
  const fenced = content.match(/```(?:json)?\s*([\s\S]*?)\s*```/i);
  const jsonText = fenced ? fenced[1].trim() : content;

  let analysis;
  try {
    analysis = JSON.parse(jsonText);
  } catch {
    // –î–±–∞–π–ª–∏–≤–∏–π —Ñ–æ–ª–±–µ–∫: –≤–∏—Ç—è–≥—É—î–º–æ –æ—Ü—ñ–Ω–∫—É/—Å—Ç–∏–ª—å –∑ —Ç–µ–∫—Å—Ç—É –π –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 220 —Å–∏–º–≤–æ–ª—ñ–≤ —è–∫ –æ–ø–∏—Å
    return {
      rating: extractRatingFromText(content),
      style: extractStyleFromText(content),
      description: content.substring(0, 220).trim(),
    };
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞ –∑–Ω–∞—á–µ–Ω—å
  const rating = Number.parseInt(analysis.rating, 10);
  const style = String(analysis.style || "").trim();
  const description = String(analysis.description || "").trim();

  if (!Number.isFinite(rating)) {
    analysis.rating = extractRatingFromText(content);
  } else {
    analysis.rating = Math.max(1, Math.min(10, rating));
  }

  analysis.style = style || extractStyleFromText(content);
  analysis.description =
    description || content.substring(0, 220).trim() || "–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.";

  // –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ-–∞—É—Ç—Ñ—ñ—Ç—ñ–≤
  if (analysis.style === "not-an-outfit") {
    analysis.rating = 0;
  }

  return {
    rating: analysis.rating,
    style: analysis.style,
    description: analysis.description,
  };
}

/** Fallbacks */
function extractRatingFromText(text) {
  const ratingMatch = text.match(/rating[:\s]*(\d+)/i);
  if (ratingMatch) {
    return Math.max(1, Math.min(10, parseInt(ratingMatch[1])));
  }
  return Math.floor(Math.random() * 3) + 7;
}

function extractStyleFromText(text) {
  const styles = [
    "casual",
    "elegant",
    "sporty",
    "streetwear",
    "business",
    "bohemian",
    "trendy",
    "classic",
    "not-an-outfit",
  ];
  const lowerText = text.toLowerCase();
  for (const style of styles) {
    if (lowerText.includes(style)) return style;
  }
  return "stylish";
}

/**
 * Generate demo analysis when OpenAI API is not available
 */
function generateDemoAnalysis() {
  const styles = [
    "casual",
    "elegant",
    "sporty",
    "streetwear",
    "business",
    "trendy",
  ];
  const randomStyle = styles[Math.floor(Math.random() * styles.length)];
  const rating = Math.floor(Math.random() * 4) + 7; // 7-10

  const descriptions = [
    "–°—Ç–∏–ª—å–Ω–∏–π –æ–±—Ä–∞–∑ –∑ –≥–∞—Ä–Ω–∏–º –ø–æ—î–¥–Ω–∞–Ω–Ω—è–º –∫–æ–ª—å–æ—Ä—ñ–≤! –°–∏–ª—É–µ—Ç –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î —Ñ—ñ–≥—É—Ä—É, –∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ –¥–æ–¥–∞—é—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ—Å—Ç—ñ. –°—É—á–∞—Å–Ω–∏–π —Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä! ‚ú®",
    "–ß—É–¥–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤! –ö–æ–ª—å–æ—Ä–æ–≤–∞ –ø–∞–ª—ñ—Ç—Ä–∞ –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–∞, —Ñ–∞—Å–æ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —ñ–¥–µ–∞–ª—å–Ω–æ. –û–±—Ä–∞–∑ –≤–∏–≥–ª—è–¥–∞—î –≤–ø–µ–≤–Ω–µ–Ω–æ —Ç–∞ —Å—Ç–∏–ª—å–Ω–æ! üí´",
    "–í—ñ–¥–º—ñ–Ω–Ω–∏–π –≤–∏–±—ñ—Ä —Ç–∫–∞–Ω–∏–Ω —Ç–∞ —Ç–µ–∫—Å—Ç—É—Ä! –ü—Ä–æ–ø–æ—Ä—Ü—ñ—ó –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ, –¥–µ—Ç–∞–ª—ñ –¥–æ–ø–æ–≤–Ω—é—é—Ç—å –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ. –î—É–∂–µ –º–æ–¥–Ω–∏–π —Ç–∞ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –ª—É–∫! üî•",
    "–ï–ª–µ–≥–∞–Ω—Ç–Ω–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è –∫–ª–∞—Å–∏–∫–∏ —Ç–∞ —Ç—Ä–µ–Ω–¥—ñ–≤! –ö–æ–ª—ñ—Ä –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ—Å—Ç—å, –∫—Ä—ñ–π —Å–∏–¥–∏—Ç—å —ñ–¥–µ–∞–ª—å–Ω–æ. –°—Ç–∏–ª—å –Ω–∞ –Ω–∞–π–≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ! ‚≠ê",
    "–Ø—Å–∫—Ä–∞–≤–∏–π —Ç–∞ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—é—á–∏–π—Å—è –æ–±—Ä–∞–∑! –ê–∫—Å–µ—Å—É–∞—Ä–∏ –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–æ –¥–æ–ø–æ–≤–Ω—é—é—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏. –°—É—á–∞—Å–Ω–æ, —Å—Ç–∏–ª—å–Ω–æ —Ç–∞ –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º! üåü",
  ];

  return {
    rating: rating,
    style: randomStyle,
    description: descriptions[Math.floor(Math.random() * descriptions.length)],
  };
}

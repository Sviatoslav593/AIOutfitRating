"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./utils/freeImageAPI.js":
/*!*******************************!*\
  !*** ./utils/freeImageAPI.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyImageClientSide: function() { return /* binding */ classifyImageClientSide; },\n/* harmony export */   classifyImageWithHuggingFace: function() { return /* binding */ classifyImageWithHuggingFace; }\n/* harmony export */ });\n/**\n * Free image classification APIs for outfit detection\n */ /**\n * Use Hugging Face's free image classification API\n * Model: google/vit-base-patch16-224 (free tier available)\n */ async function classifyImageWithHuggingFace(imageFile) {\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", imageFile);\n        // Using a free image classification model\n        const response = await fetch(\"https://api-inference.huggingface.co/models/google/vit-base-patch16-224\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer hf_demo\"\n            },\n            body: formData\n        });\n        if (!response.ok) {\n            throw new Error(\"Hugging Face API error\");\n        }\n        const results = await response.json();\n        return analyzeHuggingFaceResults(results);\n    } catch (error) {\n        console.log(\"Hugging Face API unavailable, using basic analysis\");\n        return null;\n    }\n}\n/**\n * Analyze results from Hugging Face to determine if it's an outfit\n */ function analyzeHuggingFaceResults(results) {\n    if (!Array.isArray(results)) return null;\n    // Look for HUMAN + clothing labels (more strict)\n    const humanKeywords = [\n        \"person\",\n        \"man\",\n        \"woman\",\n        \"people\",\n        \"human\",\n        \"model\",\n        \"portrait\",\n        \"face\"\n    ];\n    const clothingKeywords = [\n        \"clothing\",\n        \"shirt\",\n        \"dress\",\n        \"pants\",\n        \"jeans\",\n        \"jacket\",\n        \"suit\",\n        \"fashion\",\n        \"uniform\",\n        \"coat\"\n    ];\n    const nonOutfitKeywords = [\n        \"computer\",\n        \"screen\",\n        \"logo\",\n        \"text\",\n        \"website\",\n        \"application\",\n        \"icon\",\n        \"building\",\n        \"car\",\n        \"animal\",\n        \"food\",\n        \"landscape\",\n        \"nature\",\n        \"object\",\n        \"bag\",\n        \"handbag\",\n        \"purse\",\n        \"backpack\",\n        \"luggage\",\n        \"shoe\",\n        \"boot\",\n        \"sneaker\",\n        \"sandal\"\n    ];\n    let humanScore = 0;\n    let clothingScore = 0;\n    let nonOutfitScore = 0;\n    results.forEach((result)=>{\n        const label = result.label.toLowerCase();\n        const score = result.score;\n        // Перевіряємо наявність людини\n        if (humanKeywords.some((keyword)=>label.includes(keyword))) {\n            humanScore += score;\n        }\n        // Перевіряємо наявність одягу\n        if (clothingKeywords.some((keyword)=>label.includes(keyword))) {\n            clothingScore += score;\n        }\n        // Перевіряємо не-аутфіт об'єкти\n        if (nonOutfitKeywords.some((keyword)=>label.includes(keyword))) {\n            nonOutfitScore += score;\n        }\n    });\n    // Для аутфіту потрібні ОБА: людина І одяг\n    const isOutfit = humanScore > 0.2 && clothingScore > 0.1 && nonOutfitScore < 0.5;\n    let reasoning = \"non_clothing_detected\";\n    if (nonOutfitScore > 0.4) {\n        reasoning = \"object_detected\";\n    } else if (humanScore < 0.2) {\n        reasoning = \"no_person_detected\";\n    } else if (clothingScore < 0.1) {\n        reasoning = \"no_clothing_detected\";\n    } else if (isOutfit) {\n        reasoning = \"outfit_detected\";\n    }\n    return {\n        isOutfit,\n        confidence: Math.max(humanScore, clothingScore, nonOutfitScore),\n        topLabels: results.slice(0, 3),\n        reasoning,\n        scores: {\n            human: humanScore,\n            clothing: clothingScore,\n            nonOutfit: nonOutfitScore\n        }\n    };\n}\n/**\n * Alternative: Use ImageNet classification via TensorFlow.js (client-side)\n */ async function classifyImageClientSide(imageFile) {\n    try {\n        // Dynamic import to avoid SSR issues\n        const tf = await __webpack_require__.e(/*! import() */ \"node_modules_tensorflow_tfjs_dist_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @tensorflow/tfjs */ \"./node_modules/@tensorflow/tfjs/dist/index.js\"));\n        const mobilenet = await __webpack_require__.e(/*! import() */ \"node_modules_tensorflow-models_mobilenet_dist_mobilenet_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! @tensorflow-models/mobilenet */ \"./node_modules/@tensorflow-models/mobilenet/dist/mobilenet.esm.js\"));\n        // Load the model\n        const model = await mobilenet.load();\n        // Create image element\n        const img = new Image();\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        return new Promise((resolve)=>{\n            img.onload = async ()=>{\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.drawImage(img, 0, 0);\n                // Classify the image\n                const predictions = await model.classify(canvas);\n                resolve(analyzeTensorFlowResults(predictions));\n            };\n            img.src = URL.createObjectURL(imageFile);\n        });\n    } catch (error) {\n        console.log(\"TensorFlow.js unavailable:\", error);\n        return null;\n    }\n}\n/**\n * Analyze TensorFlow.js results for outfit detection\n */ function analyzeTensorFlowResults(predictions) {\n    const humanClasses = [\n        \"person\",\n        \"people\"\n    ];\n    const clothingClasses = [\n        \"suit\",\n        \"dress\",\n        \"shirt\",\n        \"jean\",\n        \"jacket\",\n        \"coat\",\n        \"uniform\",\n        \"gown\",\n        \"kimono\",\n        \"bikini\",\n        \"swimsuit\"\n    ];\n    const nonOutfitClasses = [\n        \"computer\",\n        \"laptop\",\n        \"screen\",\n        \"monitor\",\n        \"phone\",\n        \"car\",\n        \"building\",\n        \"animal\",\n        \"food\",\n        \"plant\",\n        \"logo\",\n        \"sign\",\n        \"text\",\n        \"bag\",\n        \"handbag\",\n        \"purse\",\n        \"backpack\",\n        \"shoe\",\n        \"boot\",\n        \"sneaker\"\n    ];\n    let humanScore = 0;\n    let clothingScore = 0;\n    let nonOutfitScore = 0;\n    predictions.forEach((prediction)=>{\n        const className = prediction.className.toLowerCase();\n        const probability = prediction.probability;\n        if (humanClasses.some((cls)=>className.includes(cls))) {\n            humanScore += probability;\n        }\n        if (clothingClasses.some((cls)=>className.includes(cls))) {\n            clothingScore += probability;\n        }\n        if (nonOutfitClasses.some((cls)=>className.includes(cls))) {\n            nonOutfitScore += probability;\n        }\n    });\n    // Для аутфіту потрібні ОБА: людина І одяг\n    const isOutfit = humanScore > 0.15 && clothingScore > 0.1 && nonOutfitScore < 0.4;\n    let reasoning = \"non_clothing_detected\";\n    if (nonOutfitScore > 0.3) {\n        reasoning = \"object_detected\";\n    } else if (humanScore < 0.15) {\n        reasoning = \"no_person_detected\";\n    } else if (clothingScore < 0.1) {\n        reasoning = \"no_clothing_detected\";\n    } else if (isOutfit) {\n        reasoning = \"outfit_detected\";\n    }\n    return {\n        isOutfit,\n        confidence: Math.max(humanScore, clothingScore, nonOutfitScore),\n        topPredictions: predictions.slice(0, 3),\n        reasoning,\n        scores: {\n            human: humanScore,\n            clothing: clothingScore,\n            nonOutfit: nonOutfitScore\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/freeImageAPI.js\n"));

/***/ })

});